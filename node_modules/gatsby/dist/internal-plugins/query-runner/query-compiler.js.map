{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-compiler.js"],"names":["normalize","require","_","websocketManager","printTransforms","IRTransforms","ValuesOfCorrectTypeRule","VariablesDefaultValueAllowedRule","FragmentsOnCompositeTypesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","PossibleFragmentSpreadsRule","ScalarLeafsRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","validationRules","lastRunHadErrors","overlayErrorID","resolveThemes","plugins","reduce","merged","plugin","name","includes","push","resolve","Runner","constructor","base","additional","schema","reportError","message","queryErrorMessage","report","format","red","panicOnBuild","process","env","gatsby_executing_command","emitError","compileAll","nodes","parseEverything","write","filesRegex","path","join","files","concat","map","folderPath","glob","sync","nodir","filter","d","match","Array","from","store","getState","components","keys","c","uniq","parser","FileParser","parseFiles","compiledNodes","Map","namePathMap","nameDefMap","documents","entries","filePath","doc","errors","length","definitions","forEach","def","value","set","compilerContext","GraphQLCompilerContext","addAll","ASTConvert","convertASTDocuments","RelayParser","transform","bind","error","printContext","slice","ctx","node","kind","get","has","otherNode","text","getRoot","GraphQLIRPrinter","print","query","originalText","isStaticQuery","hash","jsonName","kebabCase","relative","program","directory","compile","runner","queries"],"mappings":"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","sourcesContent":["// @flow\nimport path from \"path\"\nconst normalize = require(`normalize-path`)\nimport glob from \"glob\"\n\nimport { validate } from \"graphql\"\nimport { IRTransforms } from \"relay-compiler\"\nimport RelayParser from \"relay-compiler/lib/RelayParser\"\nimport ASTConvert from \"relay-compiler/lib/ASTConvert\"\nimport GraphQLCompilerContext from \"relay-compiler/lib/GraphQLCompilerContext\"\nimport filterContextForNode from \"relay-compiler/lib/filterContextForNode\"\nconst _ = require(`lodash`)\n\nimport { store } from \"../../redux\"\nimport FileParser from \"./file-parser\"\nimport GraphQLIRPrinter from \"relay-compiler/lib/GraphQLIRPrinter\"\nimport {\n  graphqlError,\n  graphqlValidationError,\n  multipleRootQueriesError,\n} from \"./graphql-errors\"\nimport report from \"gatsby-cli/lib/reporter\"\nconst websocketManager = require(`../../utils/websocket-manager`)\n\nimport type { DocumentNode, GraphQLSchema } from \"graphql\"\n\nconst { printTransforms } = IRTransforms\n\nconst {\n  ValuesOfCorrectTypeRule,\n  VariablesDefaultValueAllowedRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n} = require(`graphql`)\n\ntype RootQuery = {\n  name: string,\n  path: string,\n  text: string,\n  originalText: string,\n  isStaticQuery: boolean,\n  hash: string,\n}\n\ntype Queries = Map<string, RootQuery>\n\nconst validationRules = [\n  ValuesOfCorrectTypeRule,\n  VariablesDefaultValueAllowedRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n]\n\nlet lastRunHadErrors = null\nconst overlayErrorID = `graphql-compiler`\n\nconst resolveThemes = (plugins = []) =>\n  plugins.reduce((merged, plugin) => {\n    if (plugin.name.includes(`gatsby-theme-`)) {\n      merged.push(plugin.resolve)\n    }\n    return merged\n  }, [])\n\nclass Runner {\n  base: string\n  additional: string[]\n  schema: GraphQLSchema\n  errors: string[]\n  fragmentsDir: string\n\n  constructor(base: string, additional: string[], schema: GraphQLSchema) {\n    this.base = base\n    this.additional = additional\n    this.schema = schema\n  }\n\n  reportError(message) {\n    const queryErrorMessage = `${report.format.red(`GraphQL Error`)} ${message}`\n    report.panicOnBuild(queryErrorMessage)\n    if (process.env.gatsby_executing_command === `develop`) {\n      websocketManager.emitError(overlayErrorID, queryErrorMessage)\n      lastRunHadErrors = true\n    }\n  }\n\n  async compileAll() {\n    let nodes = await this.parseEverything()\n    return await this.write(nodes)\n  }\n\n  async parseEverything() {\n    const filesRegex = path.join(`/**`, `*.+(t|j)s?(x)`)\n    let files = [\n      path.join(this.base, `src`),\n      path.join(this.base, `.cache`, `fragments`),\n    ]\n      .concat(this.additional.map(additional => path.join(additional, `src`)))\n      .reduce(\n        (merged, folderPath) =>\n          merged.concat(\n            glob.sync(path.join(folderPath, filesRegex), {\n              nodir: true,\n            })\n          ),\n        []\n      )\n    files = files.filter(d => !d.match(/\\.d\\.ts$/))\n    files = files.map(normalize)\n\n    // Ensure all page components added as they're not necessarily in the\n    // pages directory e.g. a plugin could add a page component.  Plugins\n    // *should* copy their components (if they add a query) to .cache so that\n    // our babel plugin to remove the query on building is active (we don't\n    // run babel on code in node_modules). Otherwise the component will throw\n    // an error in the browser of \"graphql is not defined\".\n    files = files.concat(\n      Array.from(store.getState().components.keys(), c => normalize(c))\n    )\n    files = _.uniq(files)\n\n    let parser = new FileParser()\n\n    return await parser.parseFiles(files)\n  }\n\n  async write(nodes: Map<string, DocumentNode>): Promise<Queries> {\n    const compiledNodes: Queries = new Map()\n    const namePathMap = new Map()\n    const nameDefMap = new Map()\n    const documents = []\n\n    for (let [filePath, doc] of nodes.entries()) {\n      let errors = validate(this.schema, doc, validationRules)\n\n      if (errors && errors.length) {\n        this.reportError(graphqlValidationError(errors, filePath))\n        return compiledNodes\n      }\n\n      documents.push(doc)\n      doc.definitions.forEach((def: any) => {\n        const name: string = def.name.value\n        namePathMap.set(name, filePath)\n        nameDefMap.set(name, def)\n      })\n    }\n\n    let compilerContext = new GraphQLCompilerContext(this.schema)\n    try {\n      compilerContext = compilerContext.addAll(\n        ASTConvert.convertASTDocuments(\n          this.schema,\n          documents,\n          validationRules,\n          RelayParser.transform.bind(RelayParser)\n        )\n      )\n    } catch (error) {\n      this.reportError(graphqlError(namePathMap, nameDefMap, error))\n      return compiledNodes\n    }\n\n    // relay-compiler v1.5.0 added \"StripUnusedVariablesTransform\" to\n    // printTransforms. Unfortunately it currently doesn't detect variables\n    // in input objects widely used in gatsby, and therefore removing\n    // variable declaration from queries.\n    // As a temporary workaround remove that transform by slicing printTransforms.\n    const printContext = printTransforms\n      .slice(0, -1)\n      .reduce((ctx, transform) => transform(ctx, this.schema), compilerContext)\n\n    compilerContext.documents().forEach((node: { name: string }) => {\n      if (node.kind !== `Root`) return\n\n      const { name } = node\n      let filePath = namePathMap.get(name) || ``\n\n      if (compiledNodes.has(filePath)) {\n        let otherNode = compiledNodes.get(filePath)\n        this.reportError(\n          multipleRootQueriesError(\n            filePath,\n            nameDefMap.get(name),\n            otherNode && nameDefMap.get(otherNode.name)\n          )\n        )\n        return\n      }\n\n      let text = filterContextForNode(printContext.getRoot(name), printContext)\n        .documents()\n        .map(GraphQLIRPrinter.print)\n        .join(`\\n`)\n\n      const query = {\n        name,\n        text,\n        originalText: nameDefMap.get(name).text,\n        path: filePath,\n        isStaticQuery: nameDefMap.get(name).isStaticQuery,\n        hash: nameDefMap.get(name).hash,\n      }\n\n      if (query.isStaticQuery) {\n        query.jsonName =\n          `sq--` +\n          _.kebabCase(\n            `${path.relative(store.getState().program.directory, filePath)}`\n          )\n      }\n      compiledNodes.set(filePath, query)\n    })\n\n    if (\n      process.env.gatsby_executing_command === `develop` &&\n      lastRunHadErrors\n    ) {\n      websocketManager.emitError(overlayErrorID, null)\n      lastRunHadErrors = false\n    }\n\n    return compiledNodes\n  }\n}\nexport { Runner, resolveThemes }\n\nexport default async function compile(): Promise<Map<string, RootQuery>> {\n  // TODO: swap plugins to themes\n  const { program, schema, plugins } = store.getState()\n\n  const runner = new Runner(program.directory, resolveThemes(plugins), schema)\n\n  const queries = await runner.compileAll()\n\n  return queries\n}\n"],"file":"query-compiler.js"}
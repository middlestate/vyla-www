{"version":3,"sources":["../../src/redux/nodes.js"],"names":["require","store","getNodes","nodes","getState","Array","from","values","exports","getNode","id","get","getNodesByType","type","filter","node","internal","hasNodeChanged","digest","contentDigest","getNodeAndSavePathDependency","path","createPageDependency","nodeId"],"mappings":";;iBAAkBA,OAAO,CAAE,SAAF,C;MAAjBC,K,YAAAA,K;AAER;;;;;;;AAKA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,KAAK,GAAGF,KAAK,CAACG,QAAN,GAAiBD,KAA/B;;AACA,MAAIA,KAAJ,EAAW;AACT,WAAOE,KAAK,CAACC,IAAN,CAAWH,KAAK,CAACI,MAAN,EAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAPD;;AASAC,OAAO,CAACN,QAAR,GAAmBA,QAAnB;;AAEA,MAAMO,OAAO,GAAGC,EAAE,IAAIT,KAAK,CAACG,QAAN,GAAiBD,KAAjB,CAAuBQ,GAAvB,CAA2BD,EAA3B,CAAtB;AAEA;;;;;;;AAKAF,OAAO,CAACC,OAAR,GAAkBA,OAAlB;;AAEAD,OAAO,CAACI,cAAR,GAAyBC,IAAI,IAC3BX,QAAQ,GAAGY,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAcH,IAAd,KAAuBA,IAAjD,CADF;AAGA;;;;;;;;;AAOAL,OAAO,CAACS,cAAR,GAAyB,CAACP,EAAD,EAAKQ,MAAL,KAAgB;AACvC,QAAMH,IAAI,GAAGd,KAAK,CAACG,QAAN,GAAiBD,KAAjB,CAAuBQ,GAAvB,CAA2BD,EAA3B,CAAb;;AACA,MAAI,CAACK,IAAL,EAAW;AACT,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAOA,IAAI,CAACC,QAAL,CAAcG,aAAd,KAAgCD,MAAvC;AACD;AACF,CAPD;AASA;;;;;;;;;AAOAV,OAAO,CAACY,4BAAR,GAAuC,CAACV,EAAD,EAAKW,IAAL,KAAc;AACnD,QAAMC,oBAAoB,GAAGtB,OAAO,CAAE,+BAAF,CAApC;;AACA,QAAMe,IAAI,GAAGN,OAAO,CAACC,EAAD,CAApB;AACAY,EAAAA,oBAAoB,CAAC;AAAED,IAAAA,IAAF;AAAQE,IAAAA,MAAM,EAAEb;AAAhB,GAAD,CAApB;AACA,SAAOK,IAAP;AACD,CALD","sourcesContent":["const { store } = require(`./index`)\n\n/**\n * Get all nodes from redux store.\n *\n * @returns {Array}\n */\nconst getNodes = () => {\n  const nodes = store.getState().nodes\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\nexports.getNodes = getNodes\n\nconst getNode = id => store.getState().nodes.get(id)\n\n/** Get node by id from store.\n *\n * @param {string} id\n * @returns {Object}\n */\nexports.getNode = getNode\n\nexports.getNodesByType = type =>\n  getNodes().filter(node => node.internal.type === type)\n\n/**\n * Determine if node has changed.\n *\n * @param {string} id\n * @param {string} digest\n * @returns {boolean}\n */\nexports.hasNodeChanged = (id, digest) => {\n  const node = store.getState().nodes.get(id)\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\n/**\n * Get node and save path dependency.\n *\n * @param {string} id\n * @param {string} path\n * @returns {Object} node\n */\nexports.getNodeAndSavePathDependency = (id, path) => {\n  const createPageDependency = require(`./actions/add-page-dependency`)\n  const node = getNode(id)\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n"],"file":"nodes.js"}
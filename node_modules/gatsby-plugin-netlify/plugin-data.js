"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.buildPrefixer = buildPrefixer;
exports.default = makePluginData;

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

function buildPrefixer(prefix, ...paths) {
  return (...subpaths) => _path.default.join(prefix, ...paths, ...subpaths);
} // Webpack stats map to an array if source maps are enabled.
// We normalize to make direct map.


function normalizeStats(stats) {
  return _lodash.default.mapValues(stats.assetsByChunkName, script => _lodash.default.isArray(script) ? script[0] : script);
} // This function assembles data across the manifests and store to match a similar
// shape of `static-entry.js`. With it, we can build headers that point to the correct
// hashed filenames and ensure we pull in the componentChunkName.


function makePluginData(store, assetsManifest, pathPrefix) {
  const _store$getState = store.getState(),
        program = _store$getState.program,
        storePages = _store$getState.pages;

  const publicFolder = buildPrefixer(program.directory, `public`);

  const stats = require(publicFolder(`webpack.stats.json`));

  const chunkManifest = normalizeStats(stats);
  const pages = storePages; // We combine the manifest of JS and the manifest of assets to make a lookup table.

  const manifest = Object.assign({}, assetsManifest, chunkManifest);
  return {
    pages,
    manifest,
    pathPrefix,
    publicFolder
  };
}